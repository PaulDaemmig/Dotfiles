#+title:Emacs-Konfiguration
#+author: Paul Dämmig
#+language: de

* Paket-Initialisierung
#+begin_src emacs-lisp :tangle init.el :mkdirp yes
    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")
			     ("elpa" . "https://elpa.gnu.org/packages/")))

    (package-initialize)
      (unless package-archive-contents
	(package-refresh-contents))

    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)
#+end_src
* Konfiguration der Oberfläche
** Basics
#+begin_src emacs-lisp :tangle init.el :mkdirp yes
	 (setq inhibit-startup-message t)
	 (scroll-bar-mode -1)
	 (tool-bar-mode -1)
	 (tooltip-mode -1)
	 (menu-bar-mode -1)
	 (setq visible-bell t)

	 (column-number-mode)
	 (global-display-line-numbers-mode t)

	 (dolist (mode '(org-mode-hook
			 term-mode hook
			 shell-mode-hook
			 treemacs-mode-hook
			 eshell-mode-hook))
	   (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** Font
#+begin_src emacs-lisp :tangle init.el :mkdirp yes
  (set-face-attribute 'default nil :font "CodeNewRoman Nerd Font" :height 140)
  (set-face-attribute 'fixed-pitch nil :font "CodeNewRoman Nerd Font" :height 140)
  (set-face-attribute 'variable-pitch nil :font "Hack Nerd Font" :height 120)
#+end_src
** Opacity
#+begin_src emacs-lisp :tangle init.el :mkdirp yes
  (set-frame-parameter (selected-frame) 'alpha '(100 . 100))
  (add-to-list 'default-frame-alist '(alpha . (100 . 100)))
#+end_src
** Doom-Modeline
#+begin_src emacs-lisp :tangle init.el :mkdirp yes
		 (use-package all-the-icons)
		 (use-package doom-modeline
		   :init (doom-modeline-mode 1))
#+end_src
** Doom-Theme
#+begin_src emacs-lisp :tangle init.el :mkdirp yes
		 (use-package doom-themes
		   :init (load-theme 'doom-palenight t))
#+end_src
** Dashboard
#+begin_src emacs-lisp :tangle init.el :mkdirp yes
  (use-package dashboard
    :config (dashboard-setup-startup-hook))
  (setq dashboard-center-content t)
#+end_src
* Evil: Vim-Belegung in Emacs
#+begin_src emacs-lisp :tangle init.el :mkdirp yes
  (use-package evil
    :init (setq evil-want-keybinding nil)
    :config (evil-mode 1))

  (use-package evil-collection
    :config (evil-collection-init))
#+end_src
* Counsel
#+begin_src emacs-lisp :tangle init.el :mkdirp yes
	 (use-package counsel
	   :config (ivy-mode 1))
#+end_src
** which-key
#+begin_src emacs-lisp :tangle init.el :mkdirp yes
    (use-package which-key
      :config (which-key-mode t))
#+end_src
* Entwicklung
  Zur Entwicklung mit Emacs stehen eglot und lsp-mode zur Verfügung.
  Es sollte allerdings nur eines von beiden verwendet werden.
** LSP-Mode
#+begin_src emacs-lisp :tangle init.el :mkdirp
  (use-package lsp-mode)
  (use-package lsp-ui)
  (use-package lsp-ivy)
  (use-package lsp-treemacs)
  (use-package treemacs-evil)
  (use-package treemacs-projectile)
  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once))
#+end_src
** Company
#+begin_src emacs-lisp :tangle init.el :mkdirp
 (use-package company
   :config (global-company-mode t))
#+end_Src
** YASnippet
#+begin_src emacs-lisp :tangle init.el :mkdirp
    (use-package yasnippet
      :config (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
              (yas-global-mode 1))
#+end_src
** Rainbow-Delimiters
#+begin_src emacs-lisp :tangle init.el :mkdirp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode ))
#+end_src
** Languages
*** Common Lisp(SLIME)
#+begin_src emacs-lisp :tangle init.el :mkdirp yes
  (use-package slime)
  (setq inferior-lisp-program "sbcl")
#+end_src
* Projektverwaltung
#+begin_src emacs-lisp :tangle init.el :mkdirp
  (use-package magit)
  (use-package projectile)
#+end_src
* ORG-Mode
#+begin_src emacs-lisp :tangle init.el :mkdirp
  (use-package org)
  (add-hook 'org-mode-hook (lambda () (org-indent-mode 1)))
  (add-hook 'org-mode-hook (lambda () (variable-pitch-mode 1)))
  (add-hook 'org-mode-hook (lambda () (visual-line-mode 1)))
#+end_src
** Tasten
#+begin_src emacs-lisp :tangle init.el :mkdirp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src
** Variablen
#+begin_src emacs-lisp :tangle init.el :mkdirp
    (setq org-startup-folded t)
#+end_src
** Optik
*** Superstar-Mode
#+begin_src emacs-lisp :tangle init.el :mkdirp
(use-package org-superstar)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src
*** Zentrien
#+begin_src emacs-lisp :tangle init.el :mkdirp
  (defun olivetti-centering ()
  "Zentrieren von Buffern"
  (olivetti-mode 1)
  (olivetti-set-width 0.8))
  
  (use-package olivetti
    :hook (org-mode . olivetti-centering))
#+end_src
** Latex-Export
*** Klasse: "org-plain-latex"
Diese Latex-Klasse enthält standardmäßig keine Packages oder Header und kann somit vollständif per Setupfile konfiguriert werden.
#+begin_src emacs-lisp :tangle init.el :mkdirp
  (with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
	       '("org-plain-latex"
		 "\\documentclass{article}
	     [NO-DEFAULT-PACKAGES]
	     [PACKAGES]
	     [EXTRA]"
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src
*** Ob-napkin: Diagramme erstellen
#+begin_src emacs-lisp :tangle init.el :mkdirp
(use-package ob-napkin)
#+end_Src

** ORG-Roam
#+begin_src emacs-lisp :tangle init.el :mkdirp
      (use-package org-roam
	:config (setq org-roam-directory (file-truename "~/org"))
		(org-roam-db-autosync-mode t))
#+end_src
** PDFs anschauen
#+begin_src emacs-lisp :tangle init.el :mkdirp
(use-package pdf-tools)
#+end_src
* Finanzen: Ledger
Ledger ist ein Tool, um Finanzen über Textdokumente zu verwalten.
#+begin_src emacs-lisp :tangle init.el :mkdirp yes
(use-package ledger-mode
    :mode ("\\.dat\\'"
           "\\.ledger\\'")
    :custom (ledger-clear-whole-transactions t))
#+end_src
* Emacs X-Window Manager
#+begin_src emacs-lisp ;;:tangle init.el :mkdirp yes
  (use-package exwm
    :config (exwm-enable))
#+end_src
* Spellcheck
Kontrolle der Rechtschreibung.
#+begin_src emacs-lisp :tangle init.el :mkdirp yes
(use-package wucuo
  :config (setq ispell-program-name "aspell")
          (setq ispell-extra-args '("--sug-mode=ultra" "--lang=de_DE" "--run-together" "--run-together-limit=16"))
  :hook (org-mode . wucuo-start))
#+end_src
* Keybindings
#+begin_src emacs-lisp :tangle init.el :mkdirp yes
          (use-package general
          :config
            (general-create-definer my-leader-def
             :prefix "SPC")

            (my-leader-def
              :keymaps 'normal
              "a" 'org-agenda
              "d" 'counsel-dired
              "l" 'lsp
              "t" 'treemacs)

            (general-define-key
             "M-x" 'counsel-M-x
             "C-x C-b" 'counsel-switch-buffer
             "C-s" 'swiper-isearch))
#+end_src

